/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_command_tools/edufill_script_server/msg/ScriptState.msg */
#ifndef EDUFILL_SCRIPT_SERVER_MESSAGE_SCRIPTSTATE_H
#define EDUFILL_SCRIPT_SERVER_MESSAGE_SCRIPTSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace edufill_script_server
{
template <class ContainerAllocator>
struct ScriptState_ {
  typedef ScriptState_<ContainerAllocator> Type;

  ScriptState_()
  : header()
  , number(0)
  , function_name()
  , component_name()
  , parameter_name()
  , full_graph_name()
  , state(0)
  , error_code(0)
  {
  }

  ScriptState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , number(0)
  , function_name(_alloc)
  , component_name(_alloc)
  , parameter_name(_alloc)
  , full_graph_name(_alloc)
  , state(0)
  , error_code(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int16_t _number_type;
  int16_t number;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _function_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  function_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _component_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  component_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameter_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  parameter_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _full_graph_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  full_graph_name;

  typedef int8_t _state_type;
  int8_t state;

  typedef int16_t _error_code_type;
  int16_t error_code;

  enum { UNKNOWN = 0 };
  enum { ACTIVE = 1 };
  enum { SUCCEEDED = 2 };
  enum { FAILED = 3 };
  enum { PAUSED = 4 };

  typedef boost::shared_ptr< ::edufill_script_server::ScriptState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_script_server::ScriptState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ScriptState
typedef  ::edufill_script_server::ScriptState_<std::allocator<void> > ScriptState;

typedef boost::shared_ptr< ::edufill_script_server::ScriptState> ScriptStatePtr;
typedef boost::shared_ptr< ::edufill_script_server::ScriptState const> ScriptStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::edufill_script_server::ScriptState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::edufill_script_server::ScriptState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace edufill_script_server

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_script_server::ScriptState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_script_server::ScriptState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_script_server::ScriptState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4981a5a5be8dbf926085d25a1acf43ca";
  }

  static const char* value(const  ::edufill_script_server::ScriptState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4981a5a5be8dbf92ULL;
  static const uint64_t static_value2 = 0x6085d25a1acf43caULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_script_server::ScriptState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_script_server/ScriptState";
  }

  static const char* value(const  ::edufill_script_server::ScriptState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_script_server::ScriptState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int16 number\n\
string function_name\n\
string component_name\n\
string parameter_name\n\
string full_graph_name\n\
\n\
# Possible execution states\n\
byte UNKNOWN=0\n\
byte ACTIVE=1\n\
byte SUCCEEDED=2\n\
byte FAILED=3\n\
byte PAUSED=4\n\
\n\
byte state # state of execution\n\
int16 error_code # current error_code for state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::edufill_script_server::ScriptState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::edufill_script_server::ScriptState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::edufill_script_server::ScriptState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_script_server::ScriptState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.number);
    stream.next(m.function_name);
    stream.next(m.component_name);
    stream.next(m.parameter_name);
    stream.next(m.full_graph_name);
    stream.next(m.state);
    stream.next(m.error_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ScriptState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edufill_script_server::ScriptState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::edufill_script_server::ScriptState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number);
    s << indent << "function_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.function_name);
    s << indent << "component_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.component_name);
    s << indent << "parameter_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_name);
    s << indent << "full_graph_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.full_graph_name);
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "error_code: ";
    Printer<int16_t>::stream(s, indent + "  ", v.error_code);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EDUFILL_SCRIPT_SERVER_MESSAGE_SCRIPTSTATE_H

