/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_command_tools/edufill_script_server/msg/StateResult.msg */
#ifndef EDUFILL_SCRIPT_SERVER_MESSAGE_STATERESULT_H
#define EDUFILL_SCRIPT_SERVER_MESSAGE_STATERESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace edufill_script_server
{
template <class ContainerAllocator>
struct StateResult_ {
  typedef StateResult_<ContainerAllocator> Type;

  StateResult_()
  : return_value(0)
  {
  }

  StateResult_(const ContainerAllocator& _alloc)
  : return_value(0)
  {
  }

  typedef int16_t _return_value_type;
  int16_t return_value;


  typedef boost::shared_ptr< ::edufill_script_server::StateResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_script_server::StateResult_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StateResult
typedef  ::edufill_script_server::StateResult_<std::allocator<void> > StateResult;

typedef boost::shared_ptr< ::edufill_script_server::StateResult> StateResultPtr;
typedef boost::shared_ptr< ::edufill_script_server::StateResult const> StateResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::edufill_script_server::StateResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::edufill_script_server::StateResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace edufill_script_server

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_script_server::StateResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_script_server::StateResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_script_server::StateResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cfe8a15d5e2e01586cd5e05f2094f7c2";
  }

  static const char* value(const  ::edufill_script_server::StateResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcfe8a15d5e2e0158ULL;
  static const uint64_t static_value2 = 0x6cd5e05f2094f7c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_script_server::StateResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_script_server/StateResult";
  }

  static const char* value(const  ::edufill_script_server::StateResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_script_server::StateResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
int16 return_value\n\
\n\
";
  }

  static const char* value(const  ::edufill_script_server::StateResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::edufill_script_server::StateResult_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_script_server::StateResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.return_value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StateResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::edufill_script_server::StateResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::edufill_script_server::StateResult_<ContainerAllocator> & v) 
  {
    s << indent << "return_value: ";
    Printer<int16_t>::stream(s, indent + "  ", v.return_value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EDUFILL_SCRIPT_SERVER_MESSAGE_STATERESULT_H

