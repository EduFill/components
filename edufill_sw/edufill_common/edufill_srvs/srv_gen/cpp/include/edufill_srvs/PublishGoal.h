/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/edufill_public/components/edufill_sw/edufill_common/edufill_srvs/srv/PublishGoal.srv */
#ifndef EDUFILL_SRVS_SERVICE_PUBLISHGOAL_H
#define EDUFILL_SRVS_SERVICE_PUBLISHGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Vector3.h"



namespace edufill_srvs
{
template <class ContainerAllocator>
struct PublishGoalRequest_ {
  typedef PublishGoalRequest_<ContainerAllocator> Type;

  PublishGoalRequest_()
  : source_frame_id()
  , target_frame_id()
  , goal_frame_id()
  , displacement()
  {
  }

  PublishGoalRequest_(const ContainerAllocator& _alloc)
  : source_frame_id(_alloc)
  , target_frame_id(_alloc)
  , goal_frame_id(_alloc)
  , displacement(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  source_frame_id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  target_frame_id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  goal_frame_id;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _displacement_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  displacement;


  typedef boost::shared_ptr< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PublishGoalRequest
typedef  ::edufill_srvs::PublishGoalRequest_<std::allocator<void> > PublishGoalRequest;

typedef boost::shared_ptr< ::edufill_srvs::PublishGoalRequest> PublishGoalRequestPtr;
typedef boost::shared_ptr< ::edufill_srvs::PublishGoalRequest const> PublishGoalRequestConstPtr;


template <class ContainerAllocator>
struct PublishGoalResponse_ {
  typedef PublishGoalResponse_<ContainerAllocator> Type;

  PublishGoalResponse_()
  {
  }

  PublishGoalResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PublishGoalResponse
typedef  ::edufill_srvs::PublishGoalResponse_<std::allocator<void> > PublishGoalResponse;

typedef boost::shared_ptr< ::edufill_srvs::PublishGoalResponse> PublishGoalResponsePtr;
typedef boost::shared_ptr< ::edufill_srvs::PublishGoalResponse const> PublishGoalResponseConstPtr;

struct PublishGoal
{

typedef PublishGoalRequest Request;
typedef PublishGoalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PublishGoal
} // namespace edufill_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "40c3ff951d7fa57e97dd80e4753f0db5";
  }

  static const char* value(const  ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x40c3ff951d7fa57eULL;
  static const uint64_t static_value2 = 0x97dd80e4753f0db5ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/PublishGoalRequest";
  }

  static const char* value(const  ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string source_frame_id\n\
string target_frame_id\n\
string goal_frame_id\n\
geometry_msgs/Vector3 displacement\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/PublishGoalResponse";
  }

  static const char* value(const  ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::PublishGoalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.source_frame_id);
    stream.next(m.target_frame_id);
    stream.next(m.goal_frame_id);
    stream.next(m.displacement);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PublishGoalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::PublishGoalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PublishGoalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_srvs::PublishGoal> {
  static const char* value() 
  {
    return "40c3ff951d7fa57e97dd80e4753f0db5";
  }

  static const char* value(const edufill_srvs::PublishGoal&) { return value(); } 
};

template<>
struct DataType<edufill_srvs::PublishGoal> {
  static const char* value() 
  {
    return "edufill_srvs/PublishGoal";
  }

  static const char* value(const edufill_srvs::PublishGoal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::PublishGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "40c3ff951d7fa57e97dd80e4753f0db5";
  }

  static const char* value(const edufill_srvs::PublishGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::PublishGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/PublishGoal";
  }

  static const char* value(const edufill_srvs::PublishGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::PublishGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "40c3ff951d7fa57e97dd80e4753f0db5";
  }

  static const char* value(const edufill_srvs::PublishGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::PublishGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/PublishGoal";
  }

  static const char* value(const edufill_srvs::PublishGoalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_SRVS_SERVICE_PUBLISHGOAL_H

