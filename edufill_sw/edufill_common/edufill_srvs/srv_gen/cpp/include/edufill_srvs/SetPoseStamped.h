/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_common/edufill_srvs/srv/SetPoseStamped.srv */
#ifndef EDUFILL_SRVS_SERVICE_SETPOSESTAMPED_H
#define EDUFILL_SRVS_SERVICE_SETPOSESTAMPED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"



namespace edufill_srvs
{
template <class ContainerAllocator>
struct SetPoseStampedRequest_ {
  typedef SetPoseStampedRequest_<ContainerAllocator> Type;

  SetPoseStampedRequest_()
  : pose()
  {
  }

  SetPoseStampedRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetPoseStampedRequest
typedef  ::edufill_srvs::SetPoseStampedRequest_<std::allocator<void> > SetPoseStampedRequest;

typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedRequest> SetPoseStampedRequestPtr;
typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedRequest const> SetPoseStampedRequestConstPtr;


template <class ContainerAllocator>
struct SetPoseStampedResponse_ {
  typedef SetPoseStampedResponse_<ContainerAllocator> Type;

  SetPoseStampedResponse_()
  {
  }

  SetPoseStampedResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetPoseStampedResponse
typedef  ::edufill_srvs::SetPoseStampedResponse_<std::allocator<void> > SetPoseStampedResponse;

typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedResponse> SetPoseStampedResponsePtr;
typedef boost::shared_ptr< ::edufill_srvs::SetPoseStampedResponse const> SetPoseStampedResponseConstPtr;

struct SetPoseStamped
{

typedef SetPoseStampedRequest Request;
typedef SetPoseStampedResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetPoseStamped
} // namespace edufill_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f8930d968a3e84d471dff917bb1cdae";
  }

  static const char* value(const  ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3f8930d968a3e84dULL;
  static const uint64_t static_value2 = 0x471dff917bb1cdaeULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/SetPoseStampedRequest";
  }

  static const char* value(const  ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/SetPoseStampedResponse";
  }

  static const char* value(const  ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetPoseStampedRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetPoseStampedResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_srvs::SetPoseStamped> {
  static const char* value() 
  {
    return "3f8930d968a3e84d471dff917bb1cdae";
  }

  static const char* value(const edufill_srvs::SetPoseStamped&) { return value(); } 
};

template<>
struct DataType<edufill_srvs::SetPoseStamped> {
  static const char* value() 
  {
    return "edufill_srvs/SetPoseStamped";
  }

  static const char* value(const edufill_srvs::SetPoseStamped&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f8930d968a3e84d471dff917bb1cdae";
  }

  static const char* value(const edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/SetPoseStamped";
  }

  static const char* value(const edufill_srvs::SetPoseStampedRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3f8930d968a3e84d471dff917bb1cdae";
  }

  static const char* value(const edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/SetPoseStamped";
  }

  static const char* value(const edufill_srvs::SetPoseStampedResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_SRVS_SERVICE_SETPOSESTAMPED_H

