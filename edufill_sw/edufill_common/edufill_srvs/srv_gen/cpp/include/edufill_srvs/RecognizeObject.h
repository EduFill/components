/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/edufill_public/components/edufill_sw/edufill_common/edufill_srvs/srv/RecognizeObject.srv */
#ifndef EDUFILL_SRVS_SERVICE_RECOGNIZEOBJECT_H
#define EDUFILL_SRVS_SERVICE_RECOGNIZEOBJECT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/PointCloud2.h"
#include "geometry_msgs/Vector3.h"



namespace edufill_srvs
{
template <class ContainerAllocator>
struct RecognizeObjectRequest_ {
  typedef RecognizeObjectRequest_<ContainerAllocator> Type;

  RecognizeObjectRequest_()
  : cloud()
  , dimensions()
  {
  }

  RecognizeObjectRequest_(const ContainerAllocator& _alloc)
  : cloud(_alloc)
  , dimensions(_alloc)
  {
  }

  typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_type;
   ::sensor_msgs::PointCloud2_<ContainerAllocator>  cloud;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _dimensions_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  dimensions;


  typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RecognizeObjectRequest
typedef  ::edufill_srvs::RecognizeObjectRequest_<std::allocator<void> > RecognizeObjectRequest;

typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectRequest> RecognizeObjectRequestPtr;
typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectRequest const> RecognizeObjectRequestConstPtr;


template <class ContainerAllocator>
struct RecognizeObjectResponse_ {
  typedef RecognizeObjectResponse_<ContainerAllocator> Type;

  RecognizeObjectResponse_()
  : name()
  {
  }

  RecognizeObjectResponse_(const ContainerAllocator& _alloc)
  : name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;


  typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RecognizeObjectResponse
typedef  ::edufill_srvs::RecognizeObjectResponse_<std::allocator<void> > RecognizeObjectResponse;

typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectResponse> RecognizeObjectResponsePtr;
typedef boost::shared_ptr< ::edufill_srvs::RecognizeObjectResponse const> RecognizeObjectResponseConstPtr;

struct RecognizeObject
{

typedef RecognizeObjectRequest Request;
typedef RecognizeObjectResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RecognizeObject
} // namespace edufill_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a314d8ed62f931bb7e705487a5ebef13";
  }

  static const char* value(const  ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa314d8ed62f931bbULL;
  static const uint64_t static_value2 = 0x7e705487a5ebef13ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/RecognizeObjectRequest";
  }

  static const char* value(const  ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
sensor_msgs/PointCloud2 cloud\n\
\n\
geometry_msgs/Vector3 dimensions\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const  ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/RecognizeObjectResponse";
  }

  static const char* value(const  ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cloud);
    stream.next(m.dimensions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RecognizeObjectRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RecognizeObjectResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_srvs::RecognizeObject> {
  static const char* value() 
  {
    return "c44e38bc34344a59afdaff8bddf56b65";
  }

  static const char* value(const edufill_srvs::RecognizeObject&) { return value(); } 
};

template<>
struct DataType<edufill_srvs::RecognizeObject> {
  static const char* value() 
  {
    return "edufill_srvs/RecognizeObject";
  }

  static const char* value(const edufill_srvs::RecognizeObject&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c44e38bc34344a59afdaff8bddf56b65";
  }

  static const char* value(const edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/RecognizeObject";
  }

  static const char* value(const edufill_srvs::RecognizeObjectRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c44e38bc34344a59afdaff8bddf56b65";
  }

  static const char* value(const edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/RecognizeObject";
  }

  static const char* value(const edufill_srvs::RecognizeObjectResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_SRVS_SERVICE_RECOGNIZEOBJECT_H

