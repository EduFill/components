/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_common/edufill_srvs/srv/ComputeIK.srv */
#ifndef EDUFILL_SRVS_SERVICE_COMPUTEIK_H
#define EDUFILL_SRVS_SERVICE_COMPUTEIK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace edufill_srvs
{
template <class ContainerAllocator>
struct ComputeIKRequest_ {
  typedef ComputeIKRequest_<ContainerAllocator> Type;

  ComputeIKRequest_()
  : tool_pose()
  {
  }

  ComputeIKRequest_(const ContainerAllocator& _alloc)
  : tool_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _tool_pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  tool_pose;


  typedef boost::shared_ptr< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ComputeIKRequest
typedef  ::edufill_srvs::ComputeIKRequest_<std::allocator<void> > ComputeIKRequest;

typedef boost::shared_ptr< ::edufill_srvs::ComputeIKRequest> ComputeIKRequestPtr;
typedef boost::shared_ptr< ::edufill_srvs::ComputeIKRequest const> ComputeIKRequestConstPtr;


template <class ContainerAllocator>
struct ComputeIKResponse_ {
  typedef ComputeIKResponse_<ContainerAllocator> Type;

  ComputeIKResponse_()
  : joint_values()
  {
  }

  ComputeIKResponse_(const ContainerAllocator& _alloc)
  : joint_values(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_values_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  joint_values;


  typedef boost::shared_ptr< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ComputeIKResponse
typedef  ::edufill_srvs::ComputeIKResponse_<std::allocator<void> > ComputeIKResponse;

typedef boost::shared_ptr< ::edufill_srvs::ComputeIKResponse> ComputeIKResponsePtr;
typedef boost::shared_ptr< ::edufill_srvs::ComputeIKResponse const> ComputeIKResponseConstPtr;

struct ComputeIK
{

typedef ComputeIKRequest Request;
typedef ComputeIKResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ComputeIK
} // namespace edufill_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "161a9570115feb9c6bf04744f1f45193";
  }

  static const char* value(const  ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x161a9570115feb9cULL;
  static const uint64_t static_value2 = 0x6bf04744f1f45193ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ComputeIKRequest";
  }

  static const char* value(const  ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose tool_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b79b974a6ae3f399e6d798ff6613e367";
  }

  static const char* value(const  ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb79b974a6ae3f399ULL;
  static const uint64_t static_value2 = 0xe6d798ff6613e367ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ComputeIKResponse";
  }

  static const char* value(const  ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] joint_values\n\
\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::ComputeIKRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tool_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ComputeIKRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::ComputeIKResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_values);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ComputeIKResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_srvs::ComputeIK> {
  static const char* value() 
  {
    return "86d0d24d94df9b7609cf61ef59fb23e5";
  }

  static const char* value(const edufill_srvs::ComputeIK&) { return value(); } 
};

template<>
struct DataType<edufill_srvs::ComputeIK> {
  static const char* value() 
  {
    return "edufill_srvs/ComputeIK";
  }

  static const char* value(const edufill_srvs::ComputeIK&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::ComputeIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86d0d24d94df9b7609cf61ef59fb23e5";
  }

  static const char* value(const edufill_srvs::ComputeIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::ComputeIKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ComputeIK";
  }

  static const char* value(const edufill_srvs::ComputeIKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::ComputeIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86d0d24d94df9b7609cf61ef59fb23e5";
  }

  static const char* value(const edufill_srvs::ComputeIKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::ComputeIKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ComputeIK";
  }

  static const char* value(const edufill_srvs::ComputeIKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_SRVS_SERVICE_COMPUTEIK_H

