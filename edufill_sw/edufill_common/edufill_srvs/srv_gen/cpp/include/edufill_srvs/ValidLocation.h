/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_common/edufill_srvs/srv/ValidLocation.srv */
#ifndef EDUFILL_SRVS_SERVICE_VALIDLOCATION_H
#define EDUFILL_SRVS_SERVICE_VALIDLOCATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseStamped.h"



namespace edufill_srvs
{
template <class ContainerAllocator>
struct ValidLocationRequest_ {
  typedef ValidLocationRequest_<ContainerAllocator> Type;

  ValidLocationRequest_()
  : robot_pose()
  {
  }

  ValidLocationRequest_(const ContainerAllocator& _alloc)
  : robot_pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _robot_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  robot_pose;


  typedef boost::shared_ptr< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ValidLocationRequest
typedef  ::edufill_srvs::ValidLocationRequest_<std::allocator<void> > ValidLocationRequest;

typedef boost::shared_ptr< ::edufill_srvs::ValidLocationRequest> ValidLocationRequestPtr;
typedef boost::shared_ptr< ::edufill_srvs::ValidLocationRequest const> ValidLocationRequestConstPtr;


template <class ContainerAllocator>
struct ValidLocationResponse_ {
  typedef ValidLocationResponse_<ContainerAllocator> Type;

  ValidLocationResponse_()
  : costmap_value()
  {
  }

  ValidLocationResponse_(const ContainerAllocator& _alloc)
  : costmap_value(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _costmap_value_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  costmap_value;


  typedef boost::shared_ptr< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ValidLocationResponse
typedef  ::edufill_srvs::ValidLocationResponse_<std::allocator<void> > ValidLocationResponse;

typedef boost::shared_ptr< ::edufill_srvs::ValidLocationResponse> ValidLocationResponsePtr;
typedef boost::shared_ptr< ::edufill_srvs::ValidLocationResponse const> ValidLocationResponseConstPtr;

struct ValidLocation
{

typedef ValidLocationRequest Request;
typedef ValidLocationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ValidLocation
} // namespace edufill_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bb46cd500e029a262f0c2284fecd8ed7";
  }

  static const char* value(const  ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbb46cd500e029a26ULL;
  static const uint64_t static_value2 = 0x2f0c2284fecd8ed7ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ValidLocationRequest";
  }

  static const char* value(const  ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped robot_pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "941252d851e3d722da39342e4cb07316";
  }

  static const char* value(const  ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x941252d851e3d722ULL;
  static const uint64_t static_value2 = 0xda39342e4cb07316ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ValidLocationResponse";
  }

  static const char* value(const  ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string costmap_value\n\
\n\
\n\
";
  }

  static const char* value(const  ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::ValidLocationRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ValidLocationRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_srvs::ValidLocationResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.costmap_value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ValidLocationResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_srvs::ValidLocation> {
  static const char* value() 
  {
    return "76b2102915934036b1cec4698536f539";
  }

  static const char* value(const edufill_srvs::ValidLocation&) { return value(); } 
};

template<>
struct DataType<edufill_srvs::ValidLocation> {
  static const char* value() 
  {
    return "edufill_srvs/ValidLocation";
  }

  static const char* value(const edufill_srvs::ValidLocation&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::ValidLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "76b2102915934036b1cec4698536f539";
  }

  static const char* value(const edufill_srvs::ValidLocationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::ValidLocationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ValidLocation";
  }

  static const char* value(const edufill_srvs::ValidLocationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_srvs::ValidLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "76b2102915934036b1cec4698536f539";
  }

  static const char* value(const edufill_srvs::ValidLocationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_srvs::ValidLocationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_srvs/ValidLocation";
  }

  static const char* value(const edufill_srvs::ValidLocationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_SRVS_SERVICE_VALIDLOCATION_H

