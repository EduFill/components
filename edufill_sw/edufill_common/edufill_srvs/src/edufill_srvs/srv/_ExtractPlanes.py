"""autogenerated by genmsg_py from ExtractPlanesRequest.msg. Do not edit."""
import roslib.message
import struct


class ExtractPlanesRequest(roslib.message.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "edufill_srvs/ExtractPlanesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExtractPlanesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
"""autogenerated by genmsg_py from ExtractPlanesResponse.msg. Do not edit."""
import roslib.message
import struct

import hbrs_msgs.msg
import geometry_msgs.msg
import roslib.rostime
import std_msgs.msg

class ExtractPlanesResponse(roslib.message.Message):
  _md5sum = "547e20cb18143ed7cff1aec1bf407745"
  _type = "edufill_srvs/ExtractPlanesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time stamp


hbrs_msgs/Plane[] Plane_list


================================================================================
MSG: hbrs_msgs/Plane
# The pose gives you the transform that take you to the coordinate system
# of the plane, with the origin somewhere in the plane and the 
# z axis normal to the plane
geometry_msgs/PoseStamped pose

# Point + normal vector of the plane
geometry_msgs/PointStamped plane_point
geometry_msgs/Vector3Stamped normal

# These values give you the observed extents of the plane, along x and y,
# in the plane's own coordinate system (above)
# there is no guarantee that the origin of the plane coordinate system is
# inside the boundary defined by these values. 
float32 min_x
float32 max_x
float32 min_y
float32 max_y

#geometry_msgs/Point32 top_left
#geometry_msgs/Point32 top_right

#geometry_msgs/Point32 bottom_left
#geometry_msgs/Point32 bottom_right

# There is no guarantee that the plane does NOT extend further than these 
# values; this is just as far as we've observed it.
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['stamp','Plane_list']
  _slot_types = ['time','hbrs_msgs/Plane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       stamp,Plane_list
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ExtractPlanesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      if self.Plane_list is None:
        self.Plane_list = []
    else:
      self.stamp = roslib.rostime.Time()
      self.Plane_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.Plane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.Plane_list:
        _v1 = val1.pose
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.pose
        _v5 = _v4.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = _v4.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v7 = val1.plane_point
        _v8 = _v7.header
        buff.write(_struct_I.pack(_v8.seq))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v10 = _v7.point
        _x = _v10
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v11 = val1.normal
        _v12 = _v11.header
        buff.write(_struct_I.pack(_v12.seq))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v14 = _v11.vector
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_4f.pack(_x.min_x, _x.max_x, _x.min_y, _x.max_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Plane_list = []
      for i in range(0, length):
        val1 = hbrs_msgs.msg.Plane()
        _v15 = val1.pose
        _v16 = _v15.header
        start = end
        end += 4
        (_v16.seq,) = _struct_I.unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v16.frame_id = str[start:end]
        _v18 = _v15.pose
        _v19 = _v18.position
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v20 = _v18.orientation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v21 = val1.plane_point
        _v22 = _v21.header
        start = end
        end += 4
        (_v22.seq,) = _struct_I.unpack(str[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v22.frame_id = str[start:end]
        _v24 = _v21.point
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v25 = val1.normal
        _v26 = _v25.header
        start = end
        end += 4
        (_v26.seq,) = _struct_I.unpack(str[start:end])
        _v27 = _v26.stamp
        _x = _v27
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v26.frame_id = str[start:end]
        _v28 = _v25.vector
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.min_x, _x.max_x, _x.min_y, _x.max_y,) = _struct_4f.unpack(str[start:end])
        self.Plane_list.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.Plane_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.Plane_list:
        _v29 = val1.pose
        _v30 = _v29.header
        buff.write(_struct_I.pack(_v30.seq))
        _v31 = _v30.stamp
        _x = _v31
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v30.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v32 = _v29.pose
        _v33 = _v32.position
        _x = _v33
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v34 = _v32.orientation
        _x = _v34
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v35 = val1.plane_point
        _v36 = _v35.header
        buff.write(_struct_I.pack(_v36.seq))
        _v37 = _v36.stamp
        _x = _v37
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v36.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v38 = _v35.point
        _x = _v38
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v39 = val1.normal
        _v40 = _v39.header
        buff.write(_struct_I.pack(_v40.seq))
        _v41 = _v40.stamp
        _x = _v41
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v40.frame_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v42 = _v39.vector
        _x = _v42
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_struct_4f.pack(_x.min_x, _x.max_x, _x.min_y, _x.max_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.stamp is None:
        self.stamp = roslib.rostime.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.Plane_list = []
      for i in range(0, length):
        val1 = hbrs_msgs.msg.Plane()
        _v43 = val1.pose
        _v44 = _v43.header
        start = end
        end += 4
        (_v44.seq,) = _struct_I.unpack(str[start:end])
        _v45 = _v44.stamp
        _x = _v45
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v44.frame_id = str[start:end]
        _v46 = _v43.pose
        _v47 = _v46.position
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v48 = _v46.orientation
        _x = _v48
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _v49 = val1.plane_point
        _v50 = _v49.header
        start = end
        end += 4
        (_v50.seq,) = _struct_I.unpack(str[start:end])
        _v51 = _v50.stamp
        _x = _v51
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v50.frame_id = str[start:end]
        _v52 = _v49.point
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v53 = val1.normal
        _v54 = _v53.header
        start = end
        end += 4
        (_v54.seq,) = _struct_I.unpack(str[start:end])
        _v55 = _v54.stamp
        _x = _v55
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v54.frame_id = str[start:end]
        _v56 = _v53.vector
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.min_x, _x.max_x, _x.min_y, _x.max_y,) = _struct_4f.unpack(str[start:end])
        self.Plane_list.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4f = struct.Struct("<4f")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
class ExtractPlanes(roslib.message.ServiceDefinition):
  _type          = 'edufill_srvs/ExtractPlanes'
  _md5sum = '547e20cb18143ed7cff1aec1bf407745'
  _request_class  = ExtractPlanesRequest
  _response_class = ExtractPlanesResponse
