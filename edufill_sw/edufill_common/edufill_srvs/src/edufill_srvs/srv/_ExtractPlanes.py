"""autogenerated by genpy from edufill_srvs/ExtractPlanesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ExtractPlanesRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "edufill_srvs/ExtractPlanesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtractPlanesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from edufill_srvs/ExtractPlanesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hbrs_msgs.msg
import geometry_msgs.msg
import genpy

class ExtractPlanesResponse(genpy.Message):
  _md5sum = "7a7315a968ecb96dca1d6bb20d5e284c"
  _type = "edufill_srvs/ExtractPlanesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
time stamp


hbrs_msgs/PlanarPolygon[] planarpolygons



================================================================================
MSG: hbrs_msgs/PlanarPolygon
# This message is a wrapper for the PCL datatype PlanarPolygon.
# http://docs.pointclouds.org/trunk/classpcl_1_1_planar_polygon.html

# Plane coefficients
float32[4] coefficients
# List of points in the contour
geometry_msgs/Point32[] contour

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['stamp','planarpolygons']
  _slot_types = ['time','hbrs_msgs/PlanarPolygon[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,planarpolygons

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtractPlanesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.planarpolygons is None:
        self.planarpolygons = []
    else:
      self.stamp = genpy.Time()
      self.planarpolygons = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.planarpolygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.planarpolygons:
        buff.write(_struct_4f.pack(*val1.coefficients))
        length = len(val1.contour)
        buff.write(_struct_I.pack(length))
        for val2 in val1.contour:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.planarpolygons is None:
        self.planarpolygons = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planarpolygons = []
      for i in range(0, length):
        val1 = hbrs_msgs.msg.PlanarPolygon()
        start = end
        end += 16
        val1.coefficients = _struct_4f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.contour = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.contour.append(val2)
        self.planarpolygons.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.planarpolygons)
      buff.write(_struct_I.pack(length))
      for val1 in self.planarpolygons:
        buff.write(val1.coefficients.tostring())
        length = len(val1.contour)
        buff.write(_struct_I.pack(length))
        for val2 in val1.contour:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.planarpolygons is None:
        self.planarpolygons = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.planarpolygons = []
      for i in range(0, length):
        val1 = hbrs_msgs.msg.PlanarPolygon()
        start = end
        end += 16
        val1.coefficients = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.contour = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point32()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
          val1.contour.append(val2)
        self.planarpolygons.append(val1)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
_struct_2I = struct.Struct("<2I")
_struct_3f = struct.Struct("<3f")
class ExtractPlanes(object):
  _type          = 'edufill_srvs/ExtractPlanes'
  _md5sum = '7a7315a968ecb96dca1d6bb20d5e284c'
  _request_class  = ExtractPlanesRequest
  _response_class = ExtractPlanesResponse
