/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_navigation/edufill_2dnav/srv/GoalCheck.srv */
#ifndef EDUFILL_2DNAV_SERVICE_GOALCHECK_H
#define EDUFILL_2DNAV_SERVICE_GOALCHECK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/Pose.h"



namespace edufill_2dnav
{
template <class ContainerAllocator>
struct GoalCheckRequest_ {
  typedef GoalCheckRequest_<ContainerAllocator> Type;

  GoalCheckRequest_()
  : pose()
  {
  }

  GoalCheckRequest_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;


  typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GoalCheckRequest
typedef  ::edufill_2dnav::GoalCheckRequest_<std::allocator<void> > GoalCheckRequest;

typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckRequest> GoalCheckRequestPtr;
typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckRequest const> GoalCheckRequestConstPtr;


template <class ContainerAllocator>
struct GoalCheckResponse_ {
  typedef GoalCheckResponse_<ContainerAllocator> Type;

  GoalCheckResponse_()
  : feasible(false)
  {
  }

  GoalCheckResponse_(const ContainerAllocator& _alloc)
  : feasible(false)
  {
  }

  typedef uint8_t _feasible_type;
  uint8_t feasible;


  typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GoalCheckResponse
typedef  ::edufill_2dnav::GoalCheckResponse_<std::allocator<void> > GoalCheckResponse;

typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckResponse> GoalCheckResponsePtr;
typedef boost::shared_ptr< ::edufill_2dnav::GoalCheckResponse const> GoalCheckResponseConstPtr;

struct GoalCheck
{

typedef GoalCheckRequest Request;
typedef GoalCheckResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GoalCheck
} // namespace edufill_2dnav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f192399f711a48924df9a394d37edd67";
  }

  static const char* value(const  ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf192399f711a4892ULL;
  static const uint64_t static_value2 = 0x4df9a394d37edd67ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_2dnav/GoalCheckRequest";
  }

  static const char* value(const  ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "da9b323e9960cdef71ef35ead5ab650f";
  }

  static const char* value(const  ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xda9b323e9960cdefULL;
  static const uint64_t static_value2 = 0x71ef35ead5ab650fULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_2dnav/GoalCheckResponse";
  }

  static const char* value(const  ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool feasible\n\
\n\
\n\
";
  }

  static const char* value(const  ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_2dnav::GoalCheckRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GoalCheckRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_2dnav::GoalCheckResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.feasible);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GoalCheckResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_2dnav::GoalCheck> {
  static const char* value() 
  {
    return "20cdfa6c42ac124b135680669c40b0d9";
  }

  static const char* value(const edufill_2dnav::GoalCheck&) { return value(); } 
};

template<>
struct DataType<edufill_2dnav::GoalCheck> {
  static const char* value() 
  {
    return "edufill_2dnav/GoalCheck";
  }

  static const char* value(const edufill_2dnav::GoalCheck&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "20cdfa6c42ac124b135680669c40b0d9";
  }

  static const char* value(const edufill_2dnav::GoalCheckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_2dnav::GoalCheckRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_2dnav/GoalCheck";
  }

  static const char* value(const edufill_2dnav::GoalCheckRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "20cdfa6c42ac124b135680669c40b0d9";
  }

  static const char* value(const edufill_2dnav::GoalCheckResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_2dnav::GoalCheckResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_2dnav/GoalCheck";
  }

  static const char* value(const edufill_2dnav::GoalCheckResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_2DNAV_SERVICE_GOALCHECK_H

