"""autogenerated by genmsg_py from BaseScanLinearRegressionRequest.msg. Do not edit."""
import roslib.message
import struct


class BaseScanLinearRegressionRequest(roslib.message.Message):
  _md5sum = "9ac1be4fcb6a1b9bdf3735639924f4f4"
  _type = "edufill_baseplacement/BaseScanLinearRegressionRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 filter_minDistance
float32 filter_maxDistance
float32 filter_minAngle
float32 filter_maxAngle

"""
  __slots__ = ['filter_minDistance','filter_maxDistance','filter_minAngle','filter_maxAngle']
  _slot_types = ['float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       filter_minDistance,filter_maxDistance,filter_minAngle,filter_maxAngle
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(BaseScanLinearRegressionRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filter_minDistance is None:
        self.filter_minDistance = 0.
      if self.filter_maxDistance is None:
        self.filter_maxDistance = 0.
      if self.filter_minAngle is None:
        self.filter_minAngle = 0.
      if self.filter_maxAngle is None:
        self.filter_maxAngle = 0.
    else:
      self.filter_minDistance = 0.
      self.filter_maxDistance = 0.
      self.filter_minAngle = 0.
      self.filter_maxAngle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_4f.pack(_x.filter_minDistance, _x.filter_maxDistance, _x.filter_minAngle, _x.filter_maxAngle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.filter_minDistance, _x.filter_maxDistance, _x.filter_minAngle, _x.filter_maxAngle,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_4f.pack(_x.filter_minDistance, _x.filter_maxDistance, _x.filter_minAngle, _x.filter_maxAngle))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.filter_minDistance, _x.filter_maxDistance, _x.filter_minAngle, _x.filter_maxAngle,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_4f = struct.Struct("<4f")
"""autogenerated by genmsg_py from BaseScanLinearRegressionResponse.msg. Do not edit."""
import roslib.message
import struct


class BaseScanLinearRegressionResponse(roslib.message.Message):
  _md5sum = "a61f4296e5bca669bfe75a5182eaf165"
  _type = "edufill_baseplacement/BaseScanLinearRegressionResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 center
float32 a
float32 b



"""
  __slots__ = ['center','a','b']
  _slot_types = ['float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       center,a,b
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(BaseScanLinearRegressionResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.center is None:
        self.center = 0.
      if self.a is None:
        self.a = 0.
      if self.b is None:
        self.b = 0.
    else:
      self.center = 0.
      self.a = 0.
      self.b = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.center, _x.a, _x.b))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.center, _x.a, _x.b,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.center, _x.a, _x.b))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.center, _x.a, _x.b,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3f = struct.Struct("<3f")
class BaseScanLinearRegression(roslib.message.ServiceDefinition):
  _type          = 'edufill_baseplacement/BaseScanLinearRegression'
  _md5sum = 'c014943a415453b4c1f8830e5960f9aa'
  _request_class  = BaseScanLinearRegressionRequest
  _response_class = BaseScanLinearRegressionResponse
