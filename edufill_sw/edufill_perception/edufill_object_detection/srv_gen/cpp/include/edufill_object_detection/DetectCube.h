/* Auto-generated by genmsg_cpp for file /home/nemogiftsun/youBot/Edufill/components/edufill_sw/edufill_perception/edufill_object_detection/srv/DetectCube.srv */
#ifndef EDUFILL_OBJECT_DETECTION_SERVICE_DETECTCUBE_H
#define EDUFILL_OBJECT_DETECTION_SERVICE_DETECTCUBE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/PoseStamped.h"

namespace edufill_object_detection
{
template <class ContainerAllocator>
struct DetectCubeRequest_ {
  typedef DetectCubeRequest_<ContainerAllocator> Type;

  DetectCubeRequest_()
  : color()
  , min_size(0)
  , max_size(0)
  {
  }

  DetectCubeRequest_(const ContainerAllocator& _alloc)
  : color(_alloc)
  , min_size(0)
  , max_size(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  color;

  typedef int16_t _min_size_type;
  int16_t min_size;

  typedef int16_t _max_size_type;
  int16_t max_size;


  typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectCubeRequest
typedef  ::edufill_object_detection::DetectCubeRequest_<std::allocator<void> > DetectCubeRequest;

typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeRequest> DetectCubeRequestPtr;
typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeRequest const> DetectCubeRequestConstPtr;


template <class ContainerAllocator>
struct DetectCubeResponse_ {
  typedef DetectCubeResponse_<ContainerAllocator> Type;

  DetectCubeResponse_()
  : pose()
  , size(0)
  {
  }

  DetectCubeResponse_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  , size(0)
  {
  }

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  pose;

  typedef int16_t _size_type;
  int16_t size;


  typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectCubeResponse
typedef  ::edufill_object_detection::DetectCubeResponse_<std::allocator<void> > DetectCubeResponse;

typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeResponse> DetectCubeResponsePtr;
typedef boost::shared_ptr< ::edufill_object_detection::DetectCubeResponse const> DetectCubeResponseConstPtr;

struct DetectCube
{

typedef DetectCubeRequest Request;
typedef DetectCubeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DetectCube
} // namespace edufill_object_detection

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "890a1334369dea2e6b5e381bdfbf80d7";
  }

  static const char* value(const  ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x890a1334369dea2eULL;
  static const uint64_t static_value2 = 0x6b5e381bdfbf80d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_object_detection/DetectCubeRequest";
  }

  static const char* value(const  ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string color\n\
int16 min_size\n\
int16 max_size\n\
\n\
";
  }

  static const char* value(const  ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b02a2719fd1c8e4ce2c0f7bf78b6ad8c";
  }

  static const char* value(const  ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb02a2719fd1c8e4cULL;
  static const uint64_t static_value2 = 0xe2c0f7bf78b6ad8cULL;
};

template<class ContainerAllocator>
struct DataType< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_object_detection/DetectCubeResponse";
  }

  static const char* value(const  ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseStamped pose\n\
int16 size\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_object_detection::DetectCubeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.color);
    stream.next(m.min_size);
    stream.next(m.max_size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectCubeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::edufill_object_detection::DetectCubeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
    stream.next(m.size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectCubeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<edufill_object_detection::DetectCube> {
  static const char* value() 
  {
    return "8c82a0be35e19552f36195e00a21658c";
  }

  static const char* value(const edufill_object_detection::DetectCube&) { return value(); } 
};

template<>
struct DataType<edufill_object_detection::DetectCube> {
  static const char* value() 
  {
    return "edufill_object_detection/DetectCube";
  }

  static const char* value(const edufill_object_detection::DetectCube&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c82a0be35e19552f36195e00a21658c";
  }

  static const char* value(const edufill_object_detection::DetectCubeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_object_detection::DetectCubeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_object_detection/DetectCube";
  }

  static const char* value(const edufill_object_detection::DetectCubeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8c82a0be35e19552f36195e00a21658c";
  }

  static const char* value(const edufill_object_detection::DetectCubeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<edufill_object_detection::DetectCubeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edufill_object_detection/DetectCube";
  }

  static const char* value(const edufill_object_detection::DetectCubeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDUFILL_OBJECT_DETECTION_SERVICE_DETECTCUBE_H

